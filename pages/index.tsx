import axios, { AxiosResponse } from "axios";
import Head from "next/head";
import Image from "next/image";
import React, { useCallback, useEffect, useState } from "react";
import {
  usePlaidLink,
  PlaidLinkOptions,
  PlaidLinkOnSuccess,
} from "react-plaid-link";
import { useMutation, useQuery, UseMutationResult } from "react-query";
import styles from "../styles/Home.module.css";

export default function Home() {
  const [success, setSuccess] = useState(false);

  const generateToken = async (userID: string) => {
    return await axios.post("/api/create-link-token", { userID });
  };

  const createLinkToken = useMutation(generateToken);

  useEffect(() => {
    createLinkToken.mutate("63fcdc233a0c88ca0944c128");
  }, []);

  const getSuccess = (value: boolean) => {
    return setSuccess(value);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className="text-lg font-bold">Welcome page</h1>
        {createLinkToken.isSuccess && (
          <Link
            linkToken={createLinkToken.data.data.link_token}
            getSuccess={getSuccess}
          />
        )}
        {success && <h1 className="text-lg font-bold">Success!</h1>}
      </main>
    </div>
  );
}

interface LinkProps {
  linkToken: string | null;
  getSuccess: (value: boolean) => void;
}
const Link: React.FC<LinkProps> = (props: LinkProps) => {
  const onSuccess: PlaidLinkOnSuccess = React.useCallback(
    (public_token: any, metadata: any) => {
      // send public_token to server
      const response = axios.post(
        "/api/set-access-token",
        JSON.stringify({
          public_token,
          userID: "63fcdc233a0c88ca0944c128",
        })
      );
      // Handle response ...
      response
        .then(({ data }) => {
          if (data.public_token_exchange === "complete") props.getSuccess(true);
        })
        .catch((err) => console.log(err));
    },
    [props]
  );
  const config: PlaidLinkOptions = {
    token: props.linkToken!,
    // receivedRedirectUri: null,
    onSuccess,
  };
  const { open, ready } = usePlaidLink(config);
  return (
    <button onClick={() => open()} disabled={!ready}>
      Link account
    </button>
  );
};
